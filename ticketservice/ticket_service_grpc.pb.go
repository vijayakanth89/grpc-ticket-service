// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: ticketservice/ticket_service.proto

package ticketservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TimeService_TicketPurchaseService_FullMethodName = "/ticketservice.TimeService/TicketPurchaseService"
	TimeService_GetReceipt_FullMethodName            = "/ticketservice.TimeService/GetReceipt"
	TimeService_AllocationStatus_FullMethodName      = "/ticketservice.TimeService/AllocationStatus"
	TimeService_CancelTicket_FullMethodName          = "/ticketservice.TimeService/CancelTicket"
	TimeService_GetAllTickets_FullMethodName         = "/ticketservice.TimeService/GetAllTickets"
	TimeService_SeatReallocate_FullMethodName        = "/ticketservice.TimeService/SeatReallocate"
)

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServiceClient interface {
	TicketPurchaseService(ctx context.Context, in *PurchaseRequestMsg, opts ...grpc.CallOption) (*TicketPurchaseResMsg, error)
	GetReceipt(ctx context.Context, in *Tickets, opts ...grpc.CallOption) (*TicketPurchaseResMsg, error)
	AllocationStatus(ctx context.Context, in *AllocationStatusRequest, opts ...grpc.CallOption) (*AllocationStatusResponse, error)
	CancelTicket(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*CancelTicketResponse, error)
	GetAllTickets(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (*TicketsMinListRes, error)
	SeatReallocate(ctx context.Context, in *TicketEntry, opts ...grpc.CallOption) (*TicketReallocResMsg, error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) TicketPurchaseService(ctx context.Context, in *PurchaseRequestMsg, opts ...grpc.CallOption) (*TicketPurchaseResMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketPurchaseResMsg)
	err := c.cc.Invoke(ctx, TimeService_TicketPurchaseService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) GetReceipt(ctx context.Context, in *Tickets, opts ...grpc.CallOption) (*TicketPurchaseResMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketPurchaseResMsg)
	err := c.cc.Invoke(ctx, TimeService_GetReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) AllocationStatus(ctx context.Context, in *AllocationStatusRequest, opts ...grpc.CallOption) (*AllocationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocationStatusResponse)
	err := c.cc.Invoke(ctx, TimeService_AllocationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) CancelTicket(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*CancelTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTicketResponse)
	err := c.cc.Invoke(ctx, TimeService_CancelTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) GetAllTickets(ctx context.Context, in *DummyMessage, opts ...grpc.CallOption) (*TicketsMinListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketsMinListRes)
	err := c.cc.Invoke(ctx, TimeService_GetAllTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) SeatReallocate(ctx context.Context, in *TicketEntry, opts ...grpc.CallOption) (*TicketReallocResMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketReallocResMsg)
	err := c.cc.Invoke(ctx, TimeService_SeatReallocate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServiceServer is the server API for TimeService service.
// All implementations must embed UnimplementedTimeServiceServer
// for forward compatibility
type TimeServiceServer interface {
	TicketPurchaseService(context.Context, *PurchaseRequestMsg) (*TicketPurchaseResMsg, error)
	GetReceipt(context.Context, *Tickets) (*TicketPurchaseResMsg, error)
	AllocationStatus(context.Context, *AllocationStatusRequest) (*AllocationStatusResponse, error)
	CancelTicket(context.Context, *CancelTicketRequest) (*CancelTicketResponse, error)
	GetAllTickets(context.Context, *DummyMessage) (*TicketsMinListRes, error)
	SeatReallocate(context.Context, *TicketEntry) (*TicketReallocResMsg, error)
	mustEmbedUnimplementedTimeServiceServer()
}

// UnimplementedTimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeServiceServer struct {
}

func (UnimplementedTimeServiceServer) TicketPurchaseService(context.Context, *PurchaseRequestMsg) (*TicketPurchaseResMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketPurchaseService not implemented")
}
func (UnimplementedTimeServiceServer) GetReceipt(context.Context, *Tickets) (*TicketPurchaseResMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTimeServiceServer) AllocationStatus(context.Context, *AllocationStatusRequest) (*AllocationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationStatus not implemented")
}
func (UnimplementedTimeServiceServer) CancelTicket(context.Context, *CancelTicketRequest) (*CancelTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTicket not implemented")
}
func (UnimplementedTimeServiceServer) GetAllTickets(context.Context, *DummyMessage) (*TicketsMinListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTickets not implemented")
}
func (UnimplementedTimeServiceServer) SeatReallocate(context.Context, *TicketEntry) (*TicketReallocResMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeatReallocate not implemented")
}
func (UnimplementedTimeServiceServer) mustEmbedUnimplementedTimeServiceServer() {}

// UnsafeTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServiceServer will
// result in compilation errors.
type UnsafeTimeServiceServer interface {
	mustEmbedUnimplementedTimeServiceServer()
}

func RegisterTimeServiceServer(s grpc.ServiceRegistrar, srv TimeServiceServer) {
	s.RegisterService(&TimeService_ServiceDesc, srv)
}

func _TimeService_TicketPurchaseService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).TicketPurchaseService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_TicketPurchaseService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).TicketPurchaseService(ctx, req.(*PurchaseRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tickets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).GetReceipt(ctx, req.(*Tickets))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_AllocationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).AllocationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_AllocationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).AllocationStatus(ctx, req.(*AllocationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_CancelTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).CancelTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_CancelTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).CancelTicket(ctx, req.(*CancelTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_GetAllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).GetAllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_GetAllTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).GetAllTickets(ctx, req.(*DummyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_SeatReallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).SeatReallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeService_SeatReallocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).SeatReallocate(ctx, req.(*TicketEntry))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeService_ServiceDesc is the grpc.ServiceDesc for TimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketservice.TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TicketPurchaseService",
			Handler:    _TimeService_TicketPurchaseService_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _TimeService_GetReceipt_Handler,
		},
		{
			MethodName: "AllocationStatus",
			Handler:    _TimeService_AllocationStatus_Handler,
		},
		{
			MethodName: "CancelTicket",
			Handler:    _TimeService_CancelTicket_Handler,
		},
		{
			MethodName: "GetAllTickets",
			Handler:    _TimeService_GetAllTickets_Handler,
		},
		{
			MethodName: "SeatReallocate",
			Handler:    _TimeService_SeatReallocate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketservice/ticket_service.proto",
}
